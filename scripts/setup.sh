#!/bin/bash

# =============================================================================
# BUSINESS INTEGRATIONS GRAPH - SCRIPT DE SETUP AUTOM√ÅTICO
# =============================================================================
# Este script configura tudo automaticamente para n√£o-desenvolvedores
# Uso: ./scripts/setup.sh

set -e  # Parar se houver erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logs coloridos
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Banner
echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë        üï∏Ô∏è  BUSINESS INTEGRATIONS GRAPH SETUP              ‚ïë
‚ïë                                                              ‚ïë
‚ïë        Setup autom√°tico para Neo4j Graph Database           ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Verificar se est√° no diret√≥rio correto
if [ ! -f "docker-compose.yml" ]; then
    log_error "Erro: Execute este script na raiz do projeto!"
    log_info "Use: cd business-integrations-graph && ./scripts/setup.sh"
    exit 1
fi

log_info "Iniciando setup do Business Integrations Graph..."

# Passo 1: Verificar Docker
log_info "üê≥ Verificando instala√ß√£o do Docker..."
if ! command -v docker &> /dev/null; then
    log_error "Docker n√£o est√° instalado!"
    log_info "Instale o Docker: https://docs.docker.com/get-docker/"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n√£o est√° instalado!"
    log_info "Instale o Docker Compose: https://docs.docker.com/compose/install/"
    exit 1
fi

log_success "Docker e Docker Compose encontrados!"

# Passo 2: Verificar recursos do sistema
log_info "üìä Verificando recursos do sistema..."

# Verificar mem√≥ria RAM dispon√≠vel
AVAILABLE_RAM=$(free -m | awk 'NR==2{printf "%d", $7}')
if [ "$AVAILABLE_RAM" -lt 3072 ]; then  # 3GB m√≠nimo
    log_warning "RAM dispon√≠vel: ${AVAILABLE_RAM}MB (recomendado: 4GB+)"
    log_warning "O sistema pode ficar lento. Continue? (y/n)"
    read -r response
    if [ "$response" != "y" ]; then
        log_info "Setup cancelado."
        exit 0
    fi
else
    log_success "RAM dispon√≠vel: ${AVAILABLE_RAM}MB ‚úì"
fi

# Verificar espa√ßo em disco
AVAILABLE_DISK=$(df -m . | awk 'NR==2{printf "%d", $4}')
if [ "$AVAILABLE_DISK" -lt 5120 ]; then  # 5GB m√≠nimo
    log_warning "Espa√ßo em disco: ${AVAILABLE_DISK}MB (recomendado: 10GB+)"
else
    log_success "Espa√ßo em disco: ${AVAILABLE_DISK}MB ‚úì"
fi

# Passo 3: Configurar arquivo de ambiente
log_info "‚öôÔ∏è  Configurando vari√°veis de ambiente..."

if [ ! -f ".env" ]; then
    cp .env.example .env
    log_success "Arquivo .env criado com configura√ß√µes padr√£o"
    
    # Gerar senha aleat√≥ria mais segura
    NEW_PASSWORD=$(openssl rand -base64 12 | tr -d "=+/" | cut -c1-12)
    sed -i.bak "s/NEO4J_PASSWORD=businessgraph123/NEO4J_PASSWORD=${NEW_PASSWORD}/" .env
    log_info "üîí Senha gerada automaticamente: ${NEW_PASSWORD}"
    log_warning "‚ö†Ô∏è  ANOTE ESTA SENHA! Voc√™ precisar√° dela para acessar o sistema."
    
    # Ajustar mem√≥ria baseado no sistema
    if [ "$AVAILABLE_RAM" -gt 8192 ]; then  # 8GB+
        sed -i.bak "s/NEO4J_HEAP_SIZE=2G/NEO4J_HEAP_SIZE=4G/" .env
        sed -i.bak "s/NEO4J_PAGECACHE_SIZE=1G/NEO4J_PAGECACHE_SIZE=2G/" .env
        log_info "üìà Configura√ß√µes de performance otimizadas para 8GB+ RAM"
    elif [ "$AVAILABLE_RAM" -lt 4096 ]; then  # <4GB
        sed -i.bak "s/NEO4J_HEAP_SIZE=2G/NEO4J_HEAP_SIZE=1G/" .env
        sed -i.bak "s/NEO4J_PAGECACHE_SIZE=1G/NEO4J_PAGECACHE_SIZE=512M/" .env
        log_warning "üìâ Configura√ß√µes ajustadas para sistema com pouca RAM"
    fi
else
    log_info "Arquivo .env j√° existe, mantendo configura√ß√µes atuais"
fi

# Passo 4: Criar diret√≥rios necess√°rios
log_info "üìÅ Criando estrutura de diret√≥rios..."

mkdir -p data/import
mkdir -p data/integrations
mkdir -p data/relationships
mkdir -p backups
mkdir -p logs
mkdir -p monitoring

log_success "Diret√≥rios criados com sucesso!"

# Passo 5: Verificar portas
log_info "üîå Verificando disponibilidade das portas..."

check_port() {
    if lsof -Pi :$1 -sTCP:LISTEN -t >/dev/null; then
        return 1  # Porta ocupada
    else
        return 0  # Porta livre
    fi
}

if ! check_port 7474; then
    log_error "Porta 7474 j√° est√° em uso!"
    log_info "Pare o servi√ßo que est√° usando esta porta ou altere no .env"
    exit 1
fi

if ! check_port 7687; then
    log_error "Porta 7687 j√° est√° em uso!"
    log_info "Pare o servi√ßo que est√° usando esta porta ou altere no .env"
    exit 1
fi

log_success "Portas 7474 e 7687 dispon√≠veis!"

# Passo 6: Download das imagens Docker
log_info "üì• Baixando imagens Docker (pode demorar alguns minutos)..."

docker-compose pull neo4j
log_success "Imagem Neo4j baixada com sucesso!"

# Passo 7: Iniciar os servi√ßos
log_info "üöÄ Iniciando o Neo4j..."

docker-compose up -d neo4j

# Aguardar Neo4j ficar pronto
log_info "‚è≥ Aguardando Neo4j inicializar (pode demorar at√© 2 minutos)..."

TIMEOUT=120  # 2 minutos
COUNTER=0

while [ $COUNTER -lt $TIMEOUT ]; do
    if docker-compose exec -T neo4j cypher-shell -u admin -p "$(grep NEO4J_PASSWORD .env | cut -d'=' -f2)" "RETURN 1" &>/dev/null; then
        break
    fi
    sleep 5
    COUNTER=$((COUNTER + 5))
    echo -n "."
done

echo ""

if [ $COUNTER -ge $TIMEOUT ]; then
    log_error "Timeout: Neo4j n√£o iniciou corretamente"
    log_info "Verifique os logs: docker-compose logs neo4j"
    exit 1
fi

log_success "Neo4j est√° funcionando!"

# Passo 8: Importar dados iniciais
log_info "üìä Importando dados iniciais..."

# Criar script de importa√ß√£o b√°sica
cat > data/import/initial_data.cypher << EOF
// Criar constraints
CREATE CONSTRAINT integration_id FOR (i:Integration) REQUIRE i.id IS UNIQUE;
CREATE CONSTRAINT provider_id FOR (p:Provider) REQUIRE p.id IS UNIQUE;
CREATE CONSTRAINT category_id FOR (c:Category) REQUIRE c.id IS UNIQUE;

// Criar √≠ndices para performance
CREATE INDEX integration_category FOR (i:Integration) ON (i.category);
CREATE INDEX integration_complexity FOR (i:Integration) ON (i.complexity);
CREATE INDEX provider_name FOR (p:Provider) ON (p.name);

// Dados iniciais - Categorias
CREATE (c1:Category {id: 'management_systems', name: 'Sistemas de Gest√£o', description: 'ERPs, CRMs, HR systems'});
CREATE (c2:Category {id: 'financial_services', name: 'Servi√ßos Financeiros', description: 'Bancos, PIX, pagamentos'});
CREATE (c3:Category {id: 'tax_services', name: 'Servi√ßos Tribut√°rios', description: 'Receita Federal, SEFAZ'});
CREATE (c4:Category {id: 'fiscal_documents', name: 'Documentos Fiscais', description: 'NFe, NFSe, CTe'});
CREATE (c5:Category {id: 'government_services', name: 'Servi√ßos Governamentais', description: 'INSS, FGTS, BACEN'});
CREATE (c6:Category {id: 'data_services', name: 'Servi√ßos de Dados', description: 'Serasa, SPC, B3'});

// Dados iniciais - Providers
CREATE (p1:Provider {id: 'omie', name: 'Omie ERP', category: 'management_systems', reliability: 9.2});
CREATE (p2:Provider {id: 'nibo', name: 'Nibo', category: 'management_systems', reliability: 8.5});

// Dados iniciais - Integra√ß√µes b√°sicas do Omie
CREATE (i1:Integration {
    id: 'omie_consultar_clientes',
    name: 'Consultar Clientes Omie',
    category: 'management_systems',
    provider: 'omie',
    complexity: 'simple',
    endpoint: '/geral/clientes/',
    method: 'GET',
    auth_type: 'app_key_secret',
    created_at: datetime()
});

CREATE (i2:Integration {
    id: 'omie_listar_categorias',
    name: 'Listar Categorias Omie',
    category: 'management_systems', 
    provider: 'omie',
    complexity: 'simple',
    endpoint: '/geral/categorias/',
    method: 'GET',
    auth_type: 'app_key_secret',
    created_at: datetime()
});

// Relacionamentos
MATCH (i:Integration {provider: 'omie'}), (p:Provider {id: 'omie'})
CREATE (i)-[:PROVIDED_BY]->(p);

MATCH (i:Integration), (c:Category)
WHERE i.category = c.id
CREATE (i)-[:BELONGS_TO]->(c);

// Mensagem de sucesso
RETURN 'Dados iniciais importados com sucesso!' as status;
EOF

# Executar importa√ß√£o
docker-compose exec -T neo4j cypher-shell -u admin -p "$(grep NEO4J_PASSWORD .env | cut -d'=' -f2)" -f /import/initial_data.cypher

log_success "Dados iniciais importados!"

# Passo 9: Verificar instala√ß√£o
log_info "üîç Verificando instala√ß√£o..."

# Testar consulta b√°sica
RESULT=$(docker-compose exec -T neo4j cypher-shell -u admin -p "$(grep NEO4J_PASSWORD .env | cut -d'=' -f2)" "MATCH (n) RETURN count(n) as total" --format plain)

if [[ $RESULT =~ [0-9]+ ]]; then
    log_success "‚úÖ Sistema funcionando corretamente!"
else
    log_error "‚ùå Erro na verifica√ß√£o do sistema"
    exit 1
fi

# Passo 10: Informa√ß√µes finais
echo ""
echo -e "${GREEN}üéâ SETUP CONCLU√çDO COM SUCESSO! üéâ${NC}"
echo ""
echo -e "${BLUE}üìã INFORMA√á√ïES DE ACESSO:${NC}"
echo -e "   üåê Interface Web: ${YELLOW}http://localhost:7474${NC}"
echo -e "   üë§ Usu√°rio: ${YELLOW}admin${NC}"
echo -e "   üîí Senha: ${YELLOW}$(grep NEO4J_PASSWORD .env | cut -d'=' -f2)${NC}"
echo ""
echo -e "${BLUE}üîß COMANDOS √öTEIS:${NC}"
echo -e "   üìä Ver status: ${YELLOW}docker-compose ps${NC}"
echo -e "   üìù Ver logs: ${YELLOW}docker-compose logs -f neo4j${NC}"
echo -e "   ‚èπÔ∏è  Parar: ${YELLOW}docker-compose down${NC}"
echo -e "   üîÑ Reiniciar: ${YELLOW}docker-compose restart neo4j${NC}"
echo ""
echo -e "${BLUE}üìö PR√ìXIMOS PASSOS:${NC}"
echo -e "   1. Acesse a interface web no navegador"
echo -e "   2. Fa√ßa login com as credenciais acima"
echo -e "   3. Execute consultas de exemplo na documenta√ß√£o"
echo -e "   4. Importe suas pr√≥prias integra√ß√µes"
echo ""
echo -e "${GREEN}‚ú® Seu Business Integrations Graph est√° pronto para uso! ‚ú®${NC}"

# Salvar informa√ß√µes de acesso
cat > access_info.txt << EOF
=============================================================================
BUSINESS INTEGRATIONS GRAPH - INFORMA√á√ïES DE ACESSO
=============================================================================

Data da instala√ß√£o: $(date)
Vers√£o: Neo4j 5.15 Community

ACESSO WEB:
- URL: http://localhost:7474
- Usu√°rio: admin  
- Senha: $(grep NEO4J_PASSWORD .env | cut -d'=' -f2)

COMANDOS DOCKER:
- Status: docker-compose ps
- Logs: docker-compose logs -f neo4j
- Parar: docker-compose down
- Iniciar: docker-compose up -d

BACKUP:
- Backup manual: ./scripts/backup.sh
- Localiza√ß√£o: ./backups/

CONFIGURA√á√ïES:
- Arquivo: .env
- Mem√≥ria heap: $(grep NEO4J_HEAP_SIZE .env | cut -d'=' -f2)
- Cache: $(grep NEO4J_PAGECACHE_SIZE .env | cut -d'=' -f2)

=============================================================================
EOF

log_info "üìÑ Informa√ß√µes salvas em: access_info.txt"

exit 0